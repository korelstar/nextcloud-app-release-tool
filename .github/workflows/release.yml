name: Build and release on GitHub

on:
  workflow_dispatch:
    inputs:
      appid:
        description: 'Application ID'
        required: true
      ref:
        description: 'Branch (or tag or commit)'
        required: true
        default: 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      APP_ID: ${{ github.event.inputs.appid }}
      REF: ${{ github.event.inputs.ref }}
      REPOSITORY: nextcloud/${{ github.event.inputs.appid }}

    steps:
    # prepare certificates
    - name: Prepare app certificate
      env:
        NEXTCLOUD_APPSTORE_SIGNING_PRIVATE_KEY: ${{secrets.NEXTCLOUD_APPSTORE_SIGNING_PRIVATE_KEY}}
      run: |
        mkdir -p $HOME/.nextcloud/certificates
        echo "$NEXTCLOUD_APPSTORE_SIGNING_PRIVATE_KEY" > $HOME/.nextcloud/certificates/$APP_ID.key
        curl -sSfL --output $HOME/.nextcloud/certificates/$APP_ID.crt https://raw.githubusercontent.com/nextcloud/app-certificate-requests/master/$APP_ID/$APP_ID.crt

    # checkout repositories
    - name: Checkout app release tool
      uses: actions/checkout@v4
    - name: Checkout Nextcloud app
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPOSITORY }}
        ref: ${{ github.event.inputs.ref }}
        path: ${{ github.event.inputs.appid }}

    # prepare environment
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
    - name: Setup xmllint
      run: |
        sudo apt update
        sudo apt install --no-install-recommends -y libxml2-utils
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version-file: ${{ github.event.inputs.appid }}/package.json

    # extract release information
    - name: Extract version
      working-directory: ${{ github.event.inputs.appid }}
      run: |
        VERSION="$(xmllint --xpath '/info/version/text()' appinfo/info.xml)"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Extract changelog
      run: |
        php changelog.php $APP_ID/CHANGELOG.md $VERSION > changelog.md
        cat changelog.md

    # check and create release (draft)
    - name: Check for existing release
      run: curl -sSfL https://api.github.com/repos/$REPOSITORY/releases/tags/v$VERSION | jq --raw-output -f filter-release.jq >> $GITHUB_ENV
      continue-on-error: true

    - name: Check for existing release asset
      if: env.RELEASE_ID != ''
      run: |
        mkdir -p $APP_ID/build/artifacts/
        curl -sSfL --output $APP_ID/build/artifacts/$APP_ID.tar.gz https://github.com/$REPOSITORY/releases/download/v$VERSION/$APP_ID.tar.gz
        echo "RELEASE_ASSET_EXISTS=true" >> $GITHUB_ENV
      continue-on-error: true

    - name: Create release draft
      if: env.RELEASE_ID == ''
      env:
        GH_API_USER: ${{secrets.GH_API_USER}}
        GH_API_PERSONAL_TOKEN: ${{secrets.GH_API_PERSONAL_TOKEN}}
      run: |
        jq -n --arg body "$(<changelog.md)" --arg ver "$VERSION" --arg ref "$REF" '{"tag_name":("v" + $ver), "target_commitish":$ref, "name":$ver, "draft":true, "body":$body}' > release-request.json
        curl -sSf -u "$GH_API_USER:$GH_API_PERSONAL_TOKEN" -X POST -d@release-request.json https://api.github.com/repos/$REPOSITORY/releases | jq --raw-output -f filter-release.jq >> $GITHUB_ENV

    # install dependencies
    - name: Install npm dependencies
      if: env.RELEASE_ASSET_EXISTS != 'true'
      working-directory: ${{ github.event.inputs.appid }}
      run: npm ci
    - name: Install PHP dependencies
      if: env.RELEASE_ASSET_EXISTS != 'true'
      working-directory: ${{ github.event.inputs.appid }}
      run: composer install --prefer-dist
    - name: Checkout Nextcloud server
      if: env.RELEASE_ASSET_EXISTS != 'true'
      uses: actions/checkout@v4
      with:
        repository: nextcloud/server
        path: server
        submodules: recursive

    # build
    - name: Build app
      if: env.RELEASE_ASSET_EXISTS != 'true'
      working-directory: ${{ github.event.inputs.appid }}
      run: make appstore

    # show status
    - name: Show status
      working-directory: ${{ github.event.inputs.appid }}
      run: ls -lah build/artifacts/

    # upload release asset
    - name: Upload release asset
      if: env.RELEASE_ASSET_EXISTS != 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GH_API_PERSONAL_TOKEN}}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ github.event.inputs.appid }}/build/artifacts/${{ github.event.inputs.appid }}.tar.gz
        asset_name: ${{ github.event.inputs.appid }}.tar.gz
        asset_content_type: application/gzip
